@using System.Linq
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>MonoAndroid90</TargetFramework>
    <IsBindingProject>true</IsBindingProject>
    @if (!string.IsNullOrEmpty(Model.AssemblyName)) {
    <AssemblyName>@(Model.AssemblyName)</AssemblyName>
    } else {
    <AssemblyName>@(Model.NuGetPackageId)</AssemblyName>
    }
    <MonoAndroidResourcePrefix>Resources</MonoAndroidResourcePrefix>
    <MonoAndroidAssetsPrefix>Assets</MonoAndroidAssetsPrefix>
    <AndroidUseLatestPlatformSdk>False</AndroidUseLatestPlatformSdk>
    <AndroidUseIntermediateDesignerFile>True</AndroidUseIntermediateDesignerFile>
    <AndroidResgenFile>Resources\Resource.designer.cs</AndroidResgenFile>
    <RootNamespace>@(Model.NuGetPackageId.Replace("Xamarin.", ""))</RootNamespace>
    <AndroidDexTool>d8</AndroidDexTool>
    <AndroidEnableDesugar>true</AndroidEnableDesugar>
    <!--
      No warnings for:
       - CS0618: 'member' is obsolete: 'text'
       - CS0109: The member 'member' does not hide an inherited member. The new keyword is not required
       - CS0114: 'function1' hides inherited member 'function2'. To make the current method override that implementation, add the override keyword. Otherwise add the new keyword.
       - CS0628: 'member' : new protected member declared in sealed class
       - CS0108: 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
       - CS0809: Obsolete member 'member' overrides non-obsolete member 'member'
    -->
    <NoWarn>0618;0109;0114;0628;0108;0809</NoWarn>
  </PropertyGroup>

  <PropertyGroup>
    <PackageId>@(Model.NuGetPackageId)</PackageId>
    <Title>Xamarin AndroidX - @(Model.Name)</Title>
    <Summary>Xamarin.Android bindings for AndroidX - @(Model.Name)</Summary>
    <Description>Xamarin.Android bindings for AndroidX - @(Model.Name)</Description>
    <PackageTags>Xamarin AndroidX Xamarin.AndroidX Support Google @(Model.Name)</PackageTags>
    <Authors>Microsoft</Authors>
    <Owners>Microsoft</Owners>
    <Copyright>© Microsoft Corporation. All rights reserved.</Copyright>
    <PackageProjectUrl>https://go.microsoft.com/fwlink/?linkid=865352</PackageProjectUrl>
    <PackageLicenseUrl>https://go.microsoft.com/fwlink/?linkid=865381</PackageLicenseUrl>
    <PackageIconUrl>https://go.microsoft.com/fwlink/?linkid=2099392</PackageIconUrl>
    <PackageVersion>@(Model.NuGetVersion)$(PackageVersionSuffix)</PackageVersion>
    <PackageRequireLicenseAcceptance>true</PackageRequireLicenseAcceptance>
  </PropertyGroup>

  <PropertyGroup>
    <AndroidClassParser>class-parse</AndroidClassParser>
    <AndroidCodegenTarget>XAJavaInterop1</AndroidCodegenTarget>
  </PropertyGroup>

  <ItemGroup>
      @foreach (var art in @Model.MavenArtifacts) {
      <TransformFile Include="..\..\externals\@(art.MavenGroupId)\@(art.MavenArtifactId)-paramnames.xml" Condition="Exists('..\..\..\externals\@(art.MavenGroupId)\@(art.MavenArtifactId)-paramnames.xml')" />
      }
  </ItemGroup>

  @*<ItemGroup>
    @foreach (var art in @Model.MavenArtifacts) {
    <JavaSourceJar Include="..\..\externals\@(art.MavenGroupId)\@(art.MavenArtifactId)-sources.jar" Condition="Exists('..\..\..\externals\@(art.MavenGroupId)\@(art.MavenArtifactId)-sources.jar')" />
    }   
  </ItemGroup>*@

    
  <ItemGroup>
    @foreach (var art in @Model.MavenArtifacts) {
    <_AndroidDocumentationPath Include="..\..\externals\@(art.MavenGroupId)\@(art.MavenArtifactId)-paramnames.txt" Condition="Exists('..\..\..\externals\@(art.MavenGroupId)\@(art.MavenArtifactId)-paramnames.txt')" />
    }
  </ItemGroup>

  <ItemGroup>
    <None Include="@(Model.NuGetPackageId).targets" Pack="True" PackagePath="build\$(TargetFramework)" />
  </ItemGroup>

  @if (@Model.MavenArtifacts.Count > 0) {
  <ItemGroup>
    @foreach (var art in @Model.MavenArtifacts) {
      if (art.ProguardFile != null) {
    <None Include="..\..\@(art.ProguardFile)" Pack="True" PackagePath="proguard\" />
      }
    }
  </ItemGroup>
  }

  <ItemGroup>
    <Folder Include="additions\" />
    <Folder Include="jars\" />
    <Folder Include="transforms\" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="..\..\source\AssemblyInfo.cs" />
    <Compile Include="..\..\source\@(Model.MavenGroupId)\@(Model.Name)\additions\*.cs">
        <Link>additions/%(RecursiveDir)/%(Filename)%(Extension)</Link>
    </Compile>
  </ItemGroup>

  <ItemGroup>
    <TransformFile Include="..\..\source\Metadata.common.xml" >
      <Link>transforms/Metadata.common.xml</Link>
    </TransformFile>
    <TransformFile Include="..\..\source\@(Model.MavenGroupId)\@(Model.Name)\transforms\*.xml">
        <Link>transforms/%(RecursiveDir)/%(Filename)%(Extension)</Link>
    </TransformFile>
  </ItemGroup>

  <ItemGroup>
    @foreach (var art in @Model.MavenArtifacts) {
      if (art.MavenArtifactPackaging == "aar") {
    <None Include="..\..\externals\@(art.MavenGroupId)\@(art.MavenArtifactId).aar" Pack="True" PackagePath="aar\@(art.MavenGroupId).@(art.MavenArtifactId).aar" />
      } else {
    <None Include="..\..\externals\@(art.MavenGroupId)\@(art.MavenArtifactId).jar" Pack="True" PackagePath="jar\@(art.MavenGroupId).@(art.MavenArtifactId).jar" />
      }
    }   
  </ItemGroup>


  @if (@Model.MavenArtifacts.Count > 0) {
  <ItemGroup>
    @foreach (var art in @Model.MavenArtifacts) {
      if (art.MavenArtifactPackaging == "aar") {
    <InputJar Include="..\..\externals\@(art.MavenGroupId)\@(art.MavenArtifactId)\classes.jar" />
    <!-- For those artifacts with lib/ folder -->
    <InputJar 
      Condition="Exists('..\..\externals\@(art.MavenGroupId)\@(art.MavenArtifactId)\libs\')"
      Include="..\..\externals\@(art.MavenGroupId)\@(art.MavenArtifactId)\libs\*.jar" 
      />
      } else {
    <InputJar Include="..\..\externals\@(art.MavenGroupId)\@(art.MavenArtifactId).jar" />
      }
    }
  </ItemGroup>
  }

  <ItemGroup>
    <!-- ProjectReference -->
    @foreach (var dep in @Model.NuGetDependencies) {
      if (dep.IsProjectReference) {
        <ProjectReference Include="..\..\generated\@(dep.MavenArtifact.MavenGroupId).@(dep.MavenArtifact.MavenArtifactId)\@(dep.MavenArtifact.MavenGroupId).@(dep.MavenArtifact.MavenArtifactId).csproj" PrivateAssets="none" />

      }
    }
    <!-- some additional fixes -->
    @if (@Model.NuGetPackageId == "Xamarin.AndroidX.Transition") 
    {
        <ProjectReference Include="..\androidx.fragment.fragment\androidx.fragment.fragment.csproj" PrivateAssets="none" />
    }
  </ItemGroup>
  

  <ItemGroup>
    <!-- PackageReference -->
    @foreach (var dep in @Model.NuGetDependencies) {
      if (!dep.IsProjectReference) {
      <PackageReference Include="@(dep.NuGetPackageId)" Version="@(dep.NuGetVersion)" />
      }
    }
  </ItemGroup>

  @if (false && @Model.NuGetPackageId == "Xamarin.AndroidX.Annotation")
  {
    // Disabled as this build task doesn't really do anything anymore but we may use it again in the future
    <ItemGroup>
      <None Include="..\..\source\buildtasks\annotation\bin\$(Configuration)\Xamarin.AndroidX.Annotation.BuildTasks.dll" Pack="True" PackagePath="build\$(TargetFramework)" />
    </ItemGroup>
  }

  @if (@Model.NuGetPackageId == "Xamarin.AndroidX.VectorDrawable")
  {
    <ItemGroup>
      <None Include="..\..\source\buildtasks\vectordrawable\bin\$(Configuration)\Xamarin.AndroidX.VectorDrawable.BuildTasks.dll" Pack="True" PackagePath="build\$(TargetFramework)" />
    </ItemGroup>
  }

  <ItemGroup>
    <PackageReference Include="MSBuild.Sdk.Extras" Version="1.4.0" PrivateAssets="All" />
  </ItemGroup>

  <Import Project="$(MSBuildSDKExtrasTargets)" Condition="Exists('$(MSBuildSDKExtrasTargets)')" />
  
</Project>
